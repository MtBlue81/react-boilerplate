{"version":3,"sources":["layouts/CenterLayout.tsx","components/PageTitle.tsx","components/PageContent.tsx","constants/styles.ts","pages/FirstPage.tsx","pages/SecondPage.tsx","pages/NestedPage/IndexPage.tsx","pages/NestedPage/FirstPage.tsx","pages/NestedPage.tsx","pages/NotFoundPage.tsx","pages/RootPage.tsx","layouts/MainLayout.tsx","components/Sidebar.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CenterLayout","styled","div","PageTitle","title","Helmet","StyledCenterLayout","GAP_SIZE","PageContent","rest","FirstPage","SecondPage","IndexPage","path","useRouteMatch","to","NestedPage","exact","NotFoundPage","MainPage","Main","HeaderPane","HeaderWrapper","header","getMaxWidth","sidebar","SIDEBAR_WIDTH","HeaderContents","BodyPaneWrapper","BodyPane","SidePaneWrapper","ContentPane","MainLayout","content","activeStyle","borderRadius","backgroundColor","StyledNavLink","props","Wrapper","List","ul","Sidebar","Header","App","RootPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e73c97c.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nconst CenterLayout = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport default CenterLayout;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nconst DEFAULT_TITLE = 'Boilerplate';\n\nconst PageTitle: React.FC<{ title?: string }> = ({ title = DEFAULT_TITLE }) => (\n  <Helmet>\n    <title>{title}</title>\n  </Helmet>\n);\n\nexport default PageTitle;\n","import React, { ComponentProps } from 'react';\nimport styled from 'styled-components/macro';\n\nimport CenterLayout from 'layouts/CenterLayout';\nimport { GAP_SIZE, COLOR_WHITE } from 'constants/styles';\nimport PageTitle from 'components/PageTitle';\n\nconst StyledCenterLayout = styled(CenterLayout)`\n  height: 100%;\n  padding: ${GAP_SIZE * 4}px;\n  background-color: ${COLOR_WHITE};\n`;\n\nconst PageContent: React.FC<\n  { title?: string } & ComponentProps<typeof CenterLayout>\n> = ({ title, ...rest }) => (\n  <>\n    <PageTitle title={title} />\n    <StyledCenterLayout {...rest} />\n  </>\n);\n\nexport default PageContent;\n","export const HEADER_HEIGHT = 55 as const;\nexport const GAP_SIZE = 4 as const;\n\n/* eslint-disable */\nexport const COLOR_WHITE      = '#ffffff' as const;\nexport const COLOR_BLUE       = '#45a8f5' as const;\nexport const BACKGROUND_BLACK = '#343b41' as const;\n","import React from 'react';\n\nimport PageContent from 'components/PageContent';\n\nconst Title = '1st Page';\n\nconst FirstPage: React.FC = () => (\n  <PageContent title={Title}>\n    <h2>{Title}</h2>\n  </PageContent>\n);\n\nexport default FirstPage;\n","import React from 'react';\n\nimport PageContent from 'components/PageContent';\n\nconst Title = '2nd Page';\n\nconst SecondPage: React.FC = () => (\n  <PageContent title={Title}>\n    <h2>{Title}</h2>\n  </PageContent>\n);\n\nexport default SecondPage;\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nimport PageContent from 'components/PageContent';\n\nconst Title = 'Nested Page';\n\nconst IndexPage: React.FC = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <PageContent title={Title}>\n      <div>\n        <h2>{Title}</h2>\n\n        <Link to={`${path}/firstPage`}>Nested 1st Page Link</Link>\n      </div>\n    </PageContent>\n  );\n};\n\nexport default IndexPage;\n","import React from 'react';\n\nimport PageContent from 'components/PageContent';\n\nconst Title = 'Nested 1st Page';\n\nconst FirstPage: React.FC = () => (\n  <PageContent title={Title}>\n    <h2>{Title}</h2>\n  </PageContent>\n);\n\nexport default FirstPage;\n","import React from 'react';\nimport { Switch, Route, Redirect, useRouteMatch } from 'react-router-dom';\n\nimport NestedIndexPage from 'pages/NestedPage/IndexPage';\nimport NestedFirstPage from 'pages/NestedPage/FirstPage';\n\nconst NestedPage: React.FC = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={path} exact>\n        <NestedIndexPage />\n      </Route>\n      <Route path={`${path}/firstPage`} exact>\n        <NestedFirstPage />\n      </Route>\n      <Redirect to=\"/notFound\" />\n    </Switch>\n  );\n};\n\nexport default NestedPage;\n","import React from 'react';\n\nimport PageContent from 'components/PageContent';\n\nconst Title = 'Not Found';\n\nconst NotFoundPage: React.FC = () => (\n  <PageContent title={Title}>\n    <h2>{Title}</h2>\n  </PageContent>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport FirstPage from 'pages/FirstPage';\nimport SecondPage from 'pages/SecondPage';\nimport NestedPage from 'pages/NestedPage';\nimport NotFoundPage from 'pages/NotFoundPage';\n\nconst MainPage: React.FC = () => (\n  <Switch>\n    <Route path=\"/firstPage\" exact>\n      <FirstPage />\n    </Route>\n    <Route path=\"/secondPage\" exact>\n      <SecondPage />\n    </Route>\n    <Route path=\"/nestedPage\">\n      <NestedPage />\n    </Route>\n    <Route path=\"/notFound\" exact>\n      <NotFoundPage />\n    </Route>\n    <Redirect to=\"/firstPage\" />\n  </Switch>\n);\n\nexport default MainPage;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { HEADER_HEIGHT, GAP_SIZE, COLOR_BLUE } from 'constants/styles';\n\nconst SIDEBAR_WIDTH = 256;\nconst CONTENT_WIDTH = 940;\nconst CONTENT_WITH_SIDEBAR_WIDTH = 808;\nconst SPACE_MARGIN = GAP_SIZE * 5;\n\nconst Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100%;\n`;\n\nconst HeaderPane = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 200;\n  height: ${HEADER_HEIGHT}px;\n`;\n\nconst HeaderWrapper = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${HEADER_HEIGHT}px;\n  background-color: ${COLOR_BLUE};\n`;\n\nconst getMaxWidth = (sidebar: boolean) =>\n  `${\n    sidebar\n      ? SIDEBAR_WIDTH + CONTENT_WITH_SIDEBAR_WIDTH + SPACE_MARGIN\n      : CONTENT_WIDTH\n  }px`;\n\nconst HeaderContents = styled.div<{ sidebar: boolean }>`\n  width: 100%;\n  max-width: ${({ sidebar }) => getMaxWidth(sidebar)};\n  height: 100%;\n  padding: 0 ${GAP_SIZE * 2}px;\n`;\n\nconst BodyPaneWrapper = styled.div<{ sidebar: boolean }>`\n  display: flex;\n  flex: 1 0 auto;\n  flex-direction: column;\n  max-width: ${({ sidebar }) => getMaxWidth(sidebar)};\n  margin-top: ${HEADER_HEIGHT}px;\n`;\n\nconst BodyPane = styled.div`\n  display: flex;\n  flex: 1 0 auto;\n  align-items: stretch;\n`;\n\nconst SidePaneWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: ${SIDEBAR_WIDTH}px;\n  overflow-y: auto;\n`;\n\nconst ContentPane = styled.div<{ sidebar: boolean }>`\n  flex-grow: 1;\n  width: ${({ sidebar }) =>\n    `${sidebar ? CONTENT_WITH_SIDEBAR_WIDTH : CONTENT_WIDTH}px`};\n  margin-left: ${({ sidebar }) => (sidebar ? `${SPACE_MARGIN}px` : 0)};\n`;\n\nconst MainLayout: React.FC<{\n  content?: React.ReactNode;\n  header?: React.ReactNode;\n  sidebar?: React.ReactNode;\n}> = ({ content, header, sidebar }) => (\n  <Main>\n    <HeaderPane>\n      <HeaderWrapper>\n        <HeaderContents sidebar={!!sidebar}>{header}</HeaderContents>\n      </HeaderWrapper>\n    </HeaderPane>\n    <BodyPaneWrapper sidebar={!!sidebar}>\n      <BodyPane>\n        {sidebar ? <SidePaneWrapper>{sidebar}</SidePaneWrapper> : null}\n        <ContentPane sidebar={!!sidebar}>{content}</ContentPane>\n      </BodyPane>\n    </BodyPaneWrapper>\n  </Main>\n);\n\nexport default MainLayout;\n","import React from 'react';\nimport styled from 'styled-components/macro';\nimport { NavLink, NavLinkProps } from 'react-router-dom';\n\nimport {\n  GAP_SIZE,\n  COLOR_WHITE,\n  BACKGROUND_BLACK,\n  COLOR_BLUE,\n} from 'constants/styles';\n\nconst activeStyle = {\n  borderRadius: `${GAP_SIZE}px`,\n  backgroundColor: COLOR_BLUE,\n};\nconst ActiveStyledNavLink: React.FC<NavLinkProps> = (props) => (\n  <NavLink {...props} activeStyle={activeStyle} />\n);\n\nconst StyledNavLink = styled(ActiveStyledNavLink)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: ${GAP_SIZE * 8}px;\n  padding: ${GAP_SIZE * 2}px ${GAP_SIZE}px ${GAP_SIZE * 2}px ${GAP_SIZE * 4}px;\n  color: ${COLOR_WHITE};\n  text-decoration: none;\n`;\n\nconst Wrapper = styled.div`\n  height: 100%;\n  padding: ${GAP_SIZE * 4}px 0 ${GAP_SIZE * 3}px ${GAP_SIZE * 4}px;\n  color: ${COLOR_WHITE};\n  background-color: ${BACKGROUND_BLACK};\n`;\n\nconst List = styled.ul`\n  padding: 0;\n  margin: 0 0 0 ${GAP_SIZE}px;\n  list-style: none;\n`;\n\nconst Sidebar: React.FC = () => (\n  <Wrapper>\n    <List>\n      <li>\n        <StyledNavLink to=\"/firstPage\">1st Page</StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink to=\"/secondPage\">2nd Page</StyledNavLink>\n      </li>\n      <li>\n        <StyledNavLink to=\"/nestedPage\">Nested Page</StyledNavLink>\n      </li>\n    </List>\n  </Wrapper>\n);\n\nexport default Sidebar;\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { COLOR_WHITE } from 'constants/styles';\n\nconst Wrapper = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 100%;\n  font-size: 2rem;\n  color: ${COLOR_WHITE};\n`;\n\nconst Header: React.FC = () => <Wrapper>Boilerplate</Wrapper>;\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport RootPage from 'pages/RootPage';\nimport MainLayout from 'layouts/MainLayout';\nimport Sidebar from 'components/Sidebar';\nimport Header from 'components/Header';\n\nconst App: React.FC = () => (\n  <Router>\n    <MainLayout\n      content={<RootPage />}\n      sidebar={<Sidebar />}\n      header={<Header />}\n    />\n  </Router>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL as string,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}